////////////////////////////////////////////////////////////////////////////////
//
// This file was generated using Swagger Codegen, specialised for Wotif.com
//
////////////////////////////////////////////////////////////////////////////////

package {{package}};

import {{invokerPackage}}.ApiException;
import {{invokerPackage}}.ErrorWrapper;
import {{invokerPackage}}.MissingRequiredParameterError;
import {{invokerPackage}}.PostBodyEncoder;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.StringWriter;
import java.util.*;
import org.apache.commons.io.IOUtils;
import feign.*;
import feign.RequestLine;
import feign.codec.Decoder;
import feign.codec.Encoder;
import feign.codec.ErrorDecoder;
import feign.jackson.JacksonDecoder;
import javax.inject.Named;

{{#imports}}import {{import}};
{{/imports}}
{{#operations}}

/**
 * Feign Proxy
 */
interface {{{classname}}}Proxy {

  {{#operation}}
  {{=<% %>=}}
  @RequestLine("<% httpMethod %> <% path %><% #queryParams %><% #first %>?<% /first %><% paramName %>={<% paramName %>}<% #hasMore %>&<% /hasMore %><% /queryParams %>")
  <%={{ }}=%>
  {{#post}}
  {{#consumes}}
  @Headers("Content-Type: {{{mediaType}}};charset=UTF-8")
  {{/consumes}}
  {{/post}}
  {{#returnType}}{{{returnType}}} {{/returnType}}{{^returnType}}Response {{/returnType}} {{nickname}}({{#allParams}}@Named("{{{paramName}}}") {{{dataType}}} {{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}});
  
  {{/operation}}
}

/**
 * {{{classname}}} Client
 * generated using Swagger-Codegen
 */
public class {{{classname}}} {
  private String basePath;
  private {{{classname}}}Proxy feignProxy;
  private Encoder encoder;
  private Decoder decoder;
  private ApiErrorDecoder errorDecoder;

  public class ApiErrorDecoder implements ErrorDecoder {
      @Override
      public Exception decode(String methodKey, Response response) {
          try {
              StringWriter sw = new StringWriter();
              IOUtils.copy(response.body().asInputStream(), sw, "UTF-8");
              String body = sw.toString();
              ObjectMapper mapper = new ObjectMapper();
              JsonNode errorDetails = mapper.readTree(body);

              String errorClassName = "{{{modelPackage}}}." + errorDetails.get("errorClass").asText();
              Class errorClass = Class.forName(errorClassName);
              Object error = mapper.readValue(errorDetails.get("data").asText(), errorClass);
              ErrorWrapper wrapper = new ErrorWrapper(error);

              return new ApiException(wrapper);
          } catch (Exception e) {
              ErrorDecoder defaultDecoder = new ErrorDecoder.Default();
              return defaultDecoder.decode(methodKey, response);
          }
      }
  }

  //private constructor to ensure {{classname}} can't be instantiated without basePath
  @SuppressWarnings("unused")
  private {{classname}}() {}

  /**
   * @param basePath - the base URL path for the service
   */
  public {{classname}}(String basePath) {
      this(basePath, null);
  }

  /**
   * @param basePath - the base URL path for the service
   * @param requestInterceptor - interceptor to adjust headers
   */
  public {{classname}}(String basePath, RequestInterceptor requestInterceptor) {
      if(basePath == null) {
          throw new IllegalArgumentException("Base Path is null! Base Path for Service must be set before using client.");
      }
      setBasePath(basePath, requestInterceptor);
  }

  /**
   * Sets the base URL path for the service
   * @param basePath
   */
  public {{className}} setBasePath(String basePath) {
      return setBasePath(basePath, null);
  }

  /**
   * Sets the base URL path for the service
   * @param basePath
   * @param requestInterceptor - interceptor to adjust headers
   */
 public {{className}} setBasePath(String basePath, RequestInterceptor requestInterceptor) {
    this.basePath = basePath;
    this.decoder = new JacksonDecoder();
    this.encoder = new PostBodyEncoder();
    this.errorDecoder = new ApiErrorDecoder();
    Feign.Builder builder = Feign.builder().encoder(encoder).decoder(decoder);
    if (requestInterceptor != null) {
      builder.requestInterceptor(requestInterceptor);
    }
    feignProxy = builder      
      .errorDecoder(errorDecoder)
      .target({{classname}}Proxy.class, basePath);
    return this;
  }
  
  /**
   * Gets the base URL path for the service
   * @return String
   */
  public String getBasePath() {
    return basePath;
  }

  {{#operation}}
  public {{#returnType}}{{{returnType}}} {{/returnType}}{{^returnType}}Response {{/returnType}} {{{nickname}}} ({{#allParams}}{{{dataType}}} {{{paramName}}}{{#hasMore}}, {{/hasMore}}{{/allParams}})
  {{#requiredParamCount}}
  throws ApiException
  {{/requiredParamCount}}
  {
    {{#requiredParamCount}}
    // verify required params are set
    if({{#requiredParams}} {{{paramName}}} == null{{#hasMore}} || {{/hasMore}}{{/requiredParams}}) {
       throw new ApiException(new ErrorWrapper(new MissingRequiredParameterError("{{#requiredParams}}{{{paramName}}}{{#hasMore}}, {{/hasMore}}{{/requiredParams}}")));
    }
    {{/requiredParamCount}}
    return feignProxy.{{{nickname}}}({{#allParams}}{{{paramName}}}{{#hasMore}}, {{/hasMore}}{{/allParams}});
  }

  {{/operation}}
}
{{/operations}}
