////////////////////////////////////////////////////////////////////////////////
//
// This file was generated using Swagger Codegen, specialised for Wotif.com
//
////////////////////////////////////////////////////////////////////////////////

package {{package}};

import {{invokerPackage}}.ApiException;
import {{invokerPackage}}.ApiInvoker;
{{#imports}}import {{import}};
{{/imports}}

import java.util.*;

{{#operations}}
public class {{classname}} {
  String basePath;
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  //private constructor to ensure {{classname}} can't be instantiated without basePath
  @SuppressWarnings("unused")
  private {{classname}}() {}

  /**
   * @param basePath - the base URL path for the service
   */
  public {{classname}}(String basePath) {
      setBasePath(basePath);
  }

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    if(basePath == null) {
        throw new IllegalArgumentException("Base Path is null! Base Path for Service must be set before using client.");
    }
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  {{#operation}}
  public {{#returnType}}{{{returnType}}} {{/returnType}}{{^returnType}}String {{/returnType}} {{nickname}} ({{#allParams}}{{{dataType}}} {{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) throws ApiException {
    {{#requiredParamCount}}
    // verify required params are set
    if({{/requiredParamCount}}{{#requiredParams}} {{paramName}} == null {{#hasMore}}|| {{/hasMore}}{{/requiredParams}}{{#requiredParamCount}}) {
       throw new ApiException(400, "missing required params");
    }
    {{/requiredParamCount}}

    // create path and map variables
    String path = "{{path}}".replaceAll("\\{format\\}","json"){{#pathParams}}.replaceAll("\\{" + "{{paramName}}" + "\\}", apiInvoker.escapeString({{{paramName}}}.toString())){{/pathParams}};

    // query params
    Map<String, String> queryParams = new HashMap<String, String>();
    Map<String, String> headerParams = new HashMap<String, String>();

    {{#queryParams}}if(!"null".equals(String.valueOf({{paramName}}))) {
      queryParams.put("{{baseName}}", String.valueOf({{paramName}}));
    }
    {{/queryParams}}

    {{#headerParams}}headerParams.put("{{baseName}}", {{paramName}});
    {{/headerParams}}

    String contentType = "application/json";

    try {
      String response = apiInvoker.invokeAPI(basePath, path, "{{httpMethod}}", queryParams, {{#bodyParam}}{{bodyParam}}{{/bodyParam}}{{^bodyParam}}null{{/bodyParam}}, headerParams, contentType);
      {{^returnType}}
      return response;
      {{/returnType}}
      {{#returnType}}
      if(response != null) {
        return ({{{returnType}}}) ApiInvoker.deserialize(response, "{{returnContainer}}", {{returnBaseType}}.class);
      }
      else {
        return null; //response is null
      }
      {{/returnType}}
    } catch (ApiException ex) {
      if(ex.getCode() == 404) {
        return null;
      }
      else {
        throw ex;
      }
    }
  }

  {{/operation}}
}
{{/operations}}
